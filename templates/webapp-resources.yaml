AWSTemplateFormatVersion: "2010-09-09"

Description:
  A template for creating a publicly accessible webapp, which connects to a postgres db running on another 
  instance in a private subnet.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing SSH Keypair to access the instance"
    Default: keypair

  InstanceAmiId:
    Description: An ec2 instance AMI id
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Conditions:
  NoKeyName:
    !Equals ['', !Ref KeyName]


Resources:

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  Ec2WebappInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
        AWS::CloudFormation::Init:
          configSets:
            webapp_install:
              - install_cfn
              - software_install_n_configure
              - install_flask_webapp
              - configure_webapp

          install_cfn:
            files:
              /etc/cfn/cfn-hup.conf:
                  content: !Sub |
                      [main]
                      stack= ${AWS::StackId}
                      region=${AWS::Region}
                  group: root
                  mode: '000400'
                  owner: root
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                      [cfn-auto-reloader-hook]
                      triggers=post.update
                      path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                      action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Ec2WebappInstance --configsets webapp_install --region ${AWS::Region}
                  group: root
                  mode: '000400'
                  owner: root
            services:
                sysvinit:
                  cfn-hup:
                    enabled: true
                    ensureRunning: true
                    files:
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf                        

          software_install_n_configure:
            packages:
              yum:
                python3: []
                git: []
                jq: []
            files:
              /tmp/configure_env:
                content: !Sub |
                  #!/bin/bash -xe
                  rm -fr /usr/local/aws
                  rm -fr /usr/local/bin/aws
                  curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
                  unzip awscli-bundle.zip
                  ./awscli-bundle/install -b ~/bin/aws
                  ln -fs /usr/bin/pip-3.7 /usr/bin/pip
                  ln -fs /usr/bin/pip-3 /usr/bin/pip
                  ln -fs /usr/bin/pip3 /usr/bin/pip
                  aws configure set region `curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`
                group: root
                mode: '000755'
                owner: ec2-user
            commands:
              01_configure_env:
                  command: /tmp/configure_env
                  cwd: "/home/ec2-user"                           

          install_flask_webapp:
            files:
              /tmp/install_flask_webapp:
                content: !Sub |
                  #!/bin/bash -xe
                  cd /home/ec2-user
                  git clone https://github.com/paachary/flask-app.git
                  cd /home/ec2-user/flask-app
                  pip install install virtualenv
                  virtualenv myenv
                  . myenv/bin/activate
                  pip install -r requirements.txt
                group: root
                mode: '000755'
                owner: ec2-user
            commands:
              01_install_flask_webapp:
                  command: /tmp/install_flask_webapp
                  cwd: "/home/ec2-user"

          configure_webapp:
            files:
              /tmp/setup_webapp_db:
                  content: !Sub |
                    #!/bin/bash -xe
                    . myenv/bin/activate
                    export POSTGRES_USER=$(aws ssm get-parameters --region ${AWS::Region} --names PostgresUser --query Parameters[0].Value | tr -d '"')
                    export POSTGRES_PW=$(aws secretsmanager get-secret-value --secret-id PostgresRdsDbSecretPwd | jq --raw-output '.SecretString' | jq -r .password)
                    export POSTGRES_DB=$(aws ssm get-parameters --region ${AWS::Region} --names PostgresDb --query Parameters[0].Value | tr -d '"')                    
                    export FLASK_APP=$(aws ssm get-parameters --region ${AWS::Region} --names FlaskApp --query Parameters[0].Value | tr -d '"')

                    flask db init
                    flask db migrate -m "installing the db code"
                    flask db upgrade
                    gunicorn -b :8000 --access-logfile - --error-logfile - microblog:app --daemon
                    exit 0
                  group: root
                  mode: '000755'
                  owner: ec2-user
            commands:
              01_execute_db_script:
                  command: /tmp/setup_webapp_db
                  env:
                    POSTGRES_URL: !ImportValue postgres-rds-host-url
                  cwd: "/home/ec2-user/flask-app"

    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '']
      ImageId: !Ref InstanceAmiId
      InstanceType: "{{resolve:ssm:Ec2InstanceType:1}}"
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ NoKeyName,  !Ref 'AWS::NoValue', !Ref KeyName ]
      SecurityGroupIds: 
          - !ImportValue webapp-security-group
      SubnetId: !ImportValue vpc-subnet-weba
      Tags: 
          - Key: Name
            Value: Webapp-Server
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Ec2WebappInstance --configsets webapp_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Ec2WebappInstance --region ${AWS::Region}

Outputs: 
  Ec2Instance:
      Description: The Host URL for accessing the webapp server
      Value: !Join
          - ':'
          - - !GetAtt
              - Ec2WebappInstance
              - PublicDnsName
            - '8000'
      Export:
        Name: webapp
